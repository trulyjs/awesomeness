"use strict";exports.__esModule=!0,exports.truly=truly,exports.default=void 0;function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}let Truly;function GetMethods(a){return Object.getOwnPropertyNames(a)}function copyUnique(a,b,c){void 0===c[a]&&(c[a]=b[a])}function LinkMethods(a,b){return GetMethods(a.prototype).forEach(c=>copyUnique(c,a.prototype,b.prototype)),GetMethods(a).forEach(c=>copyUnique(c,a,b)),b}function executeExtension(a,b,c){if("isSupported"in a&&!a.isSupported(b)){const d=a=>JSON.stringify(a,null,"2");throw Error(`Truly extension "${a.name}" failed to support: 
                          subject: ${d(b)})
                          context: ${d(c)}
                          `)}return a.transform(b,c)}function register(a){if(!a.name)throw Error("Truly register requires a name");const b=GetMethods(Truly.prototype).includes(a.name)?Truly.prototype[a.name]:null;Truly.prototype[a.name]=function(c){return b&&b.call(this,c,this.context),this.context=executeExtension(a,c,this.context),this}}function extend(a){Object.keys(a).forEach(b=>{const c=a[b];if(c.name)throw Error("Truly extend does not support name in extension body");c.name=b,register(c)})}class TrulyBase{constructor(){_defineProperty(this,"context",void 0)}construct(a){this.context=a}then(a){return"undefined"!=typeof a&&(this.context=this.context?a:null),this.context}}_defineProperty(TrulyBase,"extend",extend),_defineProperty(TrulyBase,"register",register);function truly(a){return new Truly(a)}Truly=LinkMethods(TrulyBase,function(a){this.construct(a)});var _default=Truly;exports.default=_default;